# GUI 1
from tkinter import *
import numpy as np
import Controller
import tkinter as tk
from tkinter import ttk, messagebox
import time
from datetime import datetime
import matplotlib.pyplot as plt
from matplotlib.backends.backend_tkagg import FigureCanvasTkAgg
from matplotlib.patches import Patch




class DatQuanXeView:
    def __init__(self):
        self.btns = [[None for _ in range(8)] for _ in range(8)]
        self.trangThaiMucTieu = [[None for _ in range(8)] for _ in range(8)]
        self.ThoiGianBatDau = None
        self.DangChayj = False
        self.job_timer = None
        self.luuLS = []
        self.Space = 0
        self.Timer = 0.0
        self.Algorithm = "Ch∆∞a ch·ªçn"
        self.index = 0
        self.FlagLoi = False
        self.FlagLuuY = False
        self.FlagColor = True
        self.controller = Controller.DatQuanXeController(self)


    def showView(self):
        self.root = Tk()
        self.root.title("ƒê·∫∑t 8 qu√¢n xe")
        self.root.geometry("1400x720")
        self.root.configure(bg="#F5F5F5")

        # ====== Frame ch√≠nh ======
        frm_Main = Frame(self.root, width=1400, height=720, bg="#F5F5F5")
        frm_Main.pack(fill=tk.BOTH, expand=True, padx=20, pady=20)

        # B·∫¢NG ƒêI·ªÄU KHI·ªÇN B√äN TR√ÅI 
        frm_BangTrai = Frame(frm_Main, bg="white")
        frm_BangTrai.pack(side=tk.LEFT, fill=tk.BOTH, expand=True, padx=(0, 20))
        
        # Ti√™u ƒë·ªÅ
        lbl = Label(frm_BangTrai, text="‚ôñ ƒê·∫∂T 8 QU√ÇN XE ‚ôñ", 
                    font=("Segoe UI", 28, "bold"),
                    fg="#2E86AB", bg="white")
        lbl.pack(pady=(0, 20))

        # Khung ch·ª©a c√°c b√†n c·ªù
        frm_KhungBanCo = Frame(frm_BangTrai, bg="white")
        frm_KhungBanCo.pack(fill=tk.BOTH, expand=True)

        frm_BanCoBanDau = Frame(frm_KhungBanCo, bg="#F5F5F5", relief=tk.RAISED, bd=2)
        frm_BanCoBanDau.pack(side=tk.LEFT, padx=10, pady=10)

        lbl_TTDB = Label(frm_BanCoBanDau, text="üìç TR·∫†NG TH√ÅI BAN ƒê·∫¶U", 
                    font=("Segoe UI", 16, "bold"),
                    fg="#2E86AB", bg="#F5F5F5")
        lbl_TTDB.pack(pady=10)

        # ====== B√†n c·ªù ban ƒë·∫ßu ======
        frm_BanCoChinh = Frame(frm_BanCoBanDau, width=500, height=500, bg="#CCCCCC", bd=3, relief="ridge")
        frm_BanCoChinh.pack(padx=15, pady=(0,15))

        arr_chu = np.array(['','A','B','C','D','E','F','G','H',''])
        for i in range(10):
            btn = Button(frm_BanCoChinh, text=str(arr_chu[i]), width=3,
                        bg='#F5F5F5', relief="flat", state="disabled",
                        font=("Segoe UI", 14, "bold"))
            btn.grid(row=0, column=i, sticky="nsew")

        for i in range(8):
            Button(frm_BanCoChinh, text=str(i+1), width=3, bg='#F5F5F5',
                relief="flat", state="disabled", font=("Segoe UI", 14, "bold")).grid(row=(8-i), column=0, sticky="nsew")
            Button(frm_BanCoChinh, text=str(i+1), width=3, bg='#F5F5F5',
                relief="flat", state="disabled", font=("Segoe UI", 14, "bold")).grid(row=(8-i), column=9, sticky="nsew")

        frm_VienTrong = Frame(frm_BanCoChinh)
        frm_VienTrong.grid(row=1, column=1, columnspan=8, rowspan=8, sticky="nsew")
        frm_VienTrong.grid_propagate(False)
        self.taoBanCo(frm_VienTrong)

        for i in range(10):
            Button(frm_BanCoChinh, text=str(arr_chu[i]), width=3,
                bg='#F5F5F5', relief="flat", state="disabled",
                font=("Segoe UI", 14, "bold")).grid(row=9, column=i, sticky="nsew")


        # Khung B√†n C·ªù M·∫´u
        frm_KhungMucTieu = Frame(frm_KhungBanCo, bg="#F5F5F5", relief=tk.RAISED, bd=2)
        frm_KhungMucTieu.pack(side=tk.LEFT, padx=10, pady=10)

        lbl_TTMT = Label(frm_KhungMucTieu, text="üéØ M·ª§C TI√äU", 
                    font=("Segoe UI", 16, "bold"),
                    fg="#2E86AB", bg="#F5F5F5")
        lbl_TTMT.pack(pady=10)

        # ====== B√†n c·ªù m·ª•c ti√™u ======
        frm_BanCoMucTieu = Frame(frm_KhungMucTieu, width=500, height=500, bg="#CCCCCC", bd=3, relief="ridge")
        frm_BanCoMucTieu.pack(padx=15, pady=(0,15))

        arrchu = np.array(['','A','B','C','D','E','F','G','H',''])
        for i in range(10):
            btn = Button(frm_BanCoMucTieu, text=str(arrchu[i]), width=3,
                        bg='#F5F5F5', relief="flat", state="disabled",
                        font=("Segoe UI", 14, "bold"))
            btn.grid(row=0, column=i, sticky="nsew")

        for i in range(8):
            Button(frm_BanCoMucTieu, text=str(i+1), width=3, bg='#F5F5F5',
                relief="flat", state="disabled", font=("Segoe UI", 14, "bold")).grid(row=(8-i), column=0, sticky="nsew")
            Button(frm_BanCoMucTieu, text=str(i+1), width=3, bg='#F5F5F5',
                relief="flat", state="disabled", font=("Segoe UI", 14, "bold")).grid(row=(8-i), column=9, sticky="nsew")

        frm_Vien = Frame(frm_BanCoMucTieu)
        frm_Vien.grid(row=1, column=1, columnspan=8, rowspan=8, sticky="nsew")
        frm_Vien.grid_propagate(False)

        self.taoBanCoMucTieu(frm_Vien, self.controller.getMucTieu())

        for i in range(10):
            Button(frm_BanCoMucTieu, text=str(arr_chu[i]), width=3,
                bg='#F5F5F5', relief="flat", state="disabled",
                font=("Segoe UI", 14, "bold")).grid(row=9, column=i, sticky="nsew")
            

        # B·∫¢NG ƒêI·ªÄU KHI·ªÇN B√äN PH·∫¢I 
        frm_BangPhai = Frame(frm_Main, bg="white", width=450)
        frm_BangPhai.pack(side=tk.RIGHT, fill=tk.BOTH)
        frm_BangPhai.pack_propagate(False)

        # ƒêi·ªÅu khi·ªÉn thu·∫≠t to√°n 
        frm_KhungDieuKhien = Frame(frm_BangPhai, bg="white", relief=tk.RAISED, bd=2)
        frm_KhungDieuKhien.pack(fill=tk.X, pady=(0,15))

        lbl_DKThuatToan = Label(frm_KhungDieuKhien, text="‚öôÔ∏è ƒêI·ªÄU KHI·ªÇN THU·∫¨T TO√ÅN", 
                    font=("Segoe UI", 16, "bold"),
                    fg="#2E86AB", bg="white")
        lbl_DKThuatToan.pack(pady=10)

        #Khung l·ª±a ch·ªçn thu·∫≠t to√°n
        frm_ChonThuatToan = Frame(frm_KhungDieuKhien, bg="white")
        frm_ChonThuatToan.pack(fill=tk.X, padx=20, pady=10)

        lbl_ChonTT = Label(frm_ChonThuatToan, text="Ch·ªçn thu·∫≠t to√°n:", 
                    font=("Segoe UI", 12, "bold"),
                    fg="#2E86AB", bg="white")
        lbl_ChonTT.pack(anchor=tk.W)

        self.cbb_ThuatToan = ttk.Combobox(frm_ChonThuatToan, values=["","I. Uninformed Search Algorithms", 
                                                   "Breadth First Search", "Depth First Search","Iterative Deepening Search With DLS", "Iterative Deepening Search With DFS", "Depth Limited Search", "Uniform Cost Search",
                                                   "II. Informed Search Algorithms", 
                                                   "Greedy Search","A* Search", 
                                                   "III. Local search",
                                                    "Hill Climbing", "Simulated Annealing", "Beam Search", "Genetic Algorithms",
                                                    "IV. Search In Complex Environment",
                                                    "Recursive And Or Tree Search", "Search in an unobservable environment", "Search In Partially Observable Environment",
                                                    "V. Constraint Satisfaction Search",
                                                    "CSP BackTracking",
                                                    "CSP Forward Checking",
                                                    "CSP Ac-3 Art Concistency",
                                                    "VI. Adversarial Search",
                                                    "MiniMax Algorithm",
                                                    "Alpha-Beta Pruning"], font=("Segoe UI", 12), width=20, state="readonly")
        self.cbb_ThuatToan.pack(fill=tk.X, pady=5)

        # C√°c n√∫t ƒëi·ªÅu khi·ªÉn 
        frm_KhungNut = Frame(frm_KhungDieuKhien, bg="white")
        frm_KhungNut.pack(fill=tk.X, padx=20, pady=15)

        btn_Run = Button(frm_KhungNut, text="‚ñ∂Ô∏è CH·∫†Y", 
                         font=("Segoe UI", 8, "bold"), 
                         bg="#10b981", fg="white", 
                         activebackground="#059669", 
                         activeforeground="white", 
                         relief=tk.FLAT, cursor="hand2", command=lambda: self.controller.suKien(self.cbb_ThuatToan.get()))
        btn_Run.pack(side=tk.LEFT, padx=5, ipadx=15, ipady=8)

        btn_Reset = Button(frm_KhungNut, text="üîÑ RESET",
            font=("Segoe UI", 8, "bold"),
            bg="#6366f1",
            fg="white",
            activebackground="#4f46e5",
            activeforeground="white",
            relief=tk.FLAT,
            cursor="hand2", command=self.btnReset)
        btn_Reset.pack(side=tk.LEFT, padx=5, ipadx=15, ipady=8)

        btn_ViewGraph =  Button(frm_KhungNut, text="üìä XEM ƒêT",
            font=("Segoe UI", 8, "bold"),
            bg="#8b5cf6",
            fg="white",
            activebackground="#7c3aed",
            activeforeground="white",
            relief=tk.FLAT,
            cursor="hand2", command=self.doThiDanhGia)
        btn_ViewGraph.pack(side=tk.LEFT, padx=5, ipadx=15, ipady=8)

        # Th√¥ng Tin
        frm_KhungThongTin = Frame(frm_BangPhai, bg="white", relief=tk.RAISED, bd=2)
        frm_KhungThongTin.pack(fill=tk.X, pady=(0, 15))

        lbl_TrangThaiHT = Label(frm_KhungThongTin, text="üìä TR·∫†NG TH√ÅI HI·ªÜN T·∫†I", 
                    font=("Segoe UI", 16, "bold"),
                    fg="#2E86AB", bg="white")
        lbl_TrangThaiHT.pack(pady=10)

        self.frm_NoiDungTT = Frame(frm_KhungThongTin, bg="white")
        self.frm_NoiDungTT.pack(fill=tk.X, padx=20, pady=(0, 15))

        self.lbl_TT = Label(self.frm_NoiDungTT, text="Thu·∫≠t to√°n: Ch∆∞a ch·∫°y",
        font=("Segoe UI", 12, "bold"),
        bg="white",
        fg="#94a3b8",
        anchor=tk.W)
        self.lbl_TT.pack(fill=tk.X, pady=3)

        self.lbl_ThoiGianChay = Label(self.frm_NoiDungTT, text="‚è±Ô∏è Th·ªùi gian: 0.00s",
            font=("Segoe UI", 12, "bold"),
            bg="white",
            fg="#60a5fa",
            anchor=tk.W)
        self.lbl_ThoiGianChay.pack(fill=tk.X, pady=3)

        self.lbl_SoTT = Label(self.frm_NoiDungTT, text="üî¢ Tr·∫°ng th√°i sinh ra: 0",
            font=("Segoe UI", 12, "bold"),
            bg="white",
            fg="#fbbf24",
            anchor=tk.W)
        self.lbl_SoTT.pack(fill=tk.X, pady=3)

        nganCach = ttk.Separator(frm_KhungThongTin, orient="horizontal")
        nganCach.pack(fill=tk.X, padx=20, pady=(0, 15))

        lbl_LS = Label(frm_KhungThongTin,text="üìú L·ªäCH S·ª¨ TH·ª∞C THI",
            font=("Segoe UI", 16, "bold"),
            bg="white",
            fg="#f472b6" )
        lbl_LS.pack(fill=tk.X, padx=20, pady=(0, 15))

        frm_HopLS = Frame(frm_KhungThongTin, bg="white")
        frm_HopLS.pack(fill=tk.X, padx=20, pady=(0, 15))

        src_ThanhCuon = Scrollbar(frm_HopLS)
        src_ThanhCuon.pack(side=tk.RIGHT, fill=tk.Y)

        self.lbx_DSLS = Listbox(frm_HopLS, font=("Consolas", 9),
            bg="white",
            fg="#20252b",
            selectbackground="#6366f1",
            selectforeground="white",
            relief=tk.FLAT,
            yscrollcommand=src_ThanhCuon.set)
        self.lbx_DSLS.pack(side=tk.LEFT, fill=tk.BOTH, expand=True)
        src_ThanhCuon.config(command=self.lbx_DSLS.yview)

        self.root.mainloop()

    def taoBanCo(self, frm):
        for i in range(8):
            frm.rowconfigure(i, weight=1)
            frm.columnconfigure(i, weight=1)
            for j in range(8):
                bg = "#F7DCB9" if (i+j) % 2 == 0 else "#A97155"
                self.btns[i][j] = Button(frm, width=4, text="", background=bg,
                                        relief="flat", state="disabled",
                                        font=("Segoe UI Symbol", 18, "bold"))
                self.btns[i][j].grid(row=i, column=j, sticky="nsew")

    def taoBanCoMucTieu(self, frm, arrMucTieu):
        for i in range(8):
            frm.rowconfigure(i, weight=1)
            frm.columnconfigure(i, weight=1)
            for j in range(8):
                bg = "#F7DCB9" if (i+j) % 2 == 0 else "#A97155"
                self.trangThaiMucTieu[i][j] = Button(frm, width=4, text="", background=bg,
                                        relief="flat", state="disabled",
                                        font=("Segoe UI Symbol", 18, "bold"))
                self.trangThaiMucTieu[i][j].grid(row=i, column=j, sticky="nsew")

                if arrMucTieu[i][j] == 1:
                    self.trangThaiMucTieu[i][j].config(text="‚ôñ")

    def inBanCoNguoiChoi(self, arr, c=None):
        for i in range(len(arr)):
            self.btns[arr[i][0]][arr[i][1]].config(text="‚ôñ")
            self.root.after(70)
            self.root.update_idletasks()

    def cauHinhThongTin(self, thuaToan):
        self.Algorithm = thuaToan
        self.lbl_TT.config(text= f"Thu·∫≠t to√°n: {thuaToan}")
        self.root.update()

    def batDauDemGio(self):
        self.start_time = time.time()
        self.running = True
        self.capNhatThoiGian()

    def capNhatThoiGian(self):
        if self.running:
            elapsed = time.time() - self.start_time
            self.Timer = elapsed
            self.lbl_ThoiGianChay.config(text=f"‚è±Ô∏è Th·ªùi gian: {elapsed:.2f}s")
            # g·ªçi l·∫°i sau 100ms
            self.job_timer = self.root.after(100, self.capNhatThoiGian)

    def dungDemGio(self):
        self.running = False
        if self.running:
            self.root.after_cancel(self.job_timer)
            self.job_timer = None
            self.root.update()

        self.index += 1
        self.ghiLichSu()
        

    def reSetThongTin(self):
        self.lbl_ThoiGianChay.config(text=f"‚è±Ô∏è Th·ªùi gian: 0.00s")
        self.lbl_TT.config(text="Thu·∫≠t to√°n: Ch∆∞a ch·∫°y")
        self.lbl_SoTT.config(text="üî¢ Tr·∫°ng th√°i sinh ra: 0")

        if self.FlagLoi:
            self.lbl_Loi.destroy()
            del self.lbl_Loi
            self.FlagLoi = False

        if self.FlagLuuY:
            self.lbl_LuuY.destroy()
            del self.lbl_LuuY
            self.FlagLuuY = False
        
        for i in range(8):
            for j in range(8):
                self.btns[i][j].config(text="")

    def setSoTrangThai(self, soTT):
        self.Space = soTT
        self.lbl_SoTT.config(text=f"üî¢ Tr·∫°ng th√°i sinh ra: {soTT}")
        self.root.update()

    def loiOrLuuY(self, msg, str):

        if msg == "L·ªói":
            self.FlagLoi = True
            self.lbl_Loi = Label(self.frm_NoiDungTT,text=f"‚ö†Ô∏è L·ªói: {str}",
            font=("Segoe UI", 12, "bold"),
            bg="white",
            fg="#ff2e51",
            anchor=tk.W)
            self.lbl_Loi.pack(fill=tk.X, pady=3)
        elif msg == "L∆∞u √Ω: ":
            self.FlagLuuY = True
            self.lbl_LuuY = Label(self.frm_NoiDungTT,text=f"üìù L∆∞u √Ω: {str}",
            font=("Segoe UI", 12, "bold"),
            bg="white",
            fg="#ff7a32",
            anchor=tk.W)
            self.lbl_LuuY.pack(fill=tk.X, pady=3)

    def ghiLichSu(self):
        self.lbx_DSLS.insert(END, f"#{self.index}: {self.Algorithm}\n")
        self.lbx_DSLS.insert(END, f"Time: {self.Timer:.2f} - Space: {self.Space}\n")

        self.luuLS.append([f"{self.Algorithm}", self.Timer, self.Space, self.FlagColor])

    def btnReset(self):
        self.reSetThongTin()
        self.dungDemGio()
        self.lbx_DSLS.delete(0, tk.END)
        self.cbb_ThuatToan.current(0)
        self.luuLS.clear()
        self.index = 0


    def doThiDanhGia(self):
        if len(self.luuLS) > 0:
            arrName = []
            arrX = []
            arrY = []
            arrColors = []
            for index, item in enumerate(self.luuLS):
                if item[0] in arrName:
                    for i in range(len(arrName)):
                        if arrName[i] == item[0] and arrX[i] > item[1]:
                            arrX[i] = item[1]
                            arrY[i] = item[2]
                            if item[3]:
                                arrColors[i] = "blue"
                            elif item[3] == False:
                                arrColors[i] = "red"
                            elif item[3] == None:
                                arrColors[i] = "orange"
                            break
                    continue
                arrName.append(item[0])   # t√™n thu·∫≠t to√°n
                arrX.append(item[1])      # th·ªùi gian
                arrY.append(item[2])      # kh√¥ng gian
                if item[3]:
                    arrColors.append("blue")
                elif item[3] == False:
                    arrColors.append("red")
                elif item[3] == None:
                    arrColors.append("orange")
            windownNew = Tk()
            windownNew.title("ƒê√°nh gi√° thu·∫≠t to√°n")

            fig, ax = plt.subplots(figsize=(10,7))

            # d√πng index cho v·ªã tr√≠ c·ªôt
            x_pos = range(len(arrName))  

            bars = ax.bar(x_pos, arrY, width=0.4, color=arrColors)
            ax.set_ylim(0, max(arrY) * 1.3)
            for bar, company in zip(bars, arrName):
                height = bar.get_height()
                ax.text(bar.get_x() + bar.get_width()/2, height + 0.2,
                        company, ha='center', va='bottom', fontsize=9)

            ax.set_xlabel("Thu·∫≠t to√°n (th·ªùi gian ch·∫°y)")
            ax.set_ylabel("Kh√¥ng gian")
            ax.set_title("Bi·ªÉu ƒë·ªì ƒë√°nh gi√° thu·∫≠t to√°n")

            # set nh√£n tr·ª•c X hi·ªÉn th·ªã th·ªùi gian
            ax.set_xticks(x_pos)
            ax.set_xticklabels([f"{d:.2f}" for d in arrX], rotation=45)

            # Ch√∫ th√≠ch
            legend_elements = [
                Patch(facecolor='blue', label='T√¨m th·∫•y m·ª•c ti√™u'),
                Patch(facecolor='red', label='Kh√¥ng t√¨m th·∫•y m·ª•c ti√™u'),
                Patch(facecolor='orange', label='T√¨m m·ªôt t·∫≠p ho·∫∑c m·ªôt tr·∫°ng th√°i h·ª£p l·ªá.')
            ]
            ax.legend(handles=legend_elements, loc='best')

            canvas = FigureCanvasTkAgg(fig, master=windownNew)
            canvas.draw()
            canvas.get_tk_widget().pack(fill=tk.BOTH, expand=True)

            windownNew.mainloop()
        else:
            messagebox.showinfo("TH√îNG B√ÅO", "Kh√¥ng c√≥ d·ªØ li·ªáu ƒë·ªÉ hi·ªÉn th·ªã ƒë·ªì th·ªã.")




                

            








        




    







